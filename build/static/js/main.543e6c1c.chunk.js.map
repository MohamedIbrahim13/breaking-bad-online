{"version":3,"sources":["img/logo.png","img/spinner.gif","components/Header.js","components/Search.js","components/Spinner.js","components/Item.js","components/Grid.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","Search","setQuery","useState","entrySearch","setEntry","type","onChange","e","q","target","value","placeholder","autoFocus","Spinner","spinner","style","width","margin","display","CharacterItem","item","img","name","portrayed","nickname","birthday","status","CharacterGrid","isLoading","items","map","key","char_id","App","setItems","setLoading","query","useEffect","axios","get","then","res","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4HAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,sLCW5BC,EARA,WACb,OACE,4BAAQC,UAAU,UAChB,yBAAKC,IAAKC,IAAMC,IAAI,OCWXC,EAfA,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACEC,mBAAS,IADX,mBACtBC,EADsB,KACVC,EADU,KAM7B,OACE,6BAASR,UAAU,UACjB,8BACE,2BAAOS,KAAK,OAAOT,UAAU,eAAeU,SAAU,SAAAC,GAAC,OAP3CC,EAOsDD,EAAEE,OAAOC,MAN/EN,EAASI,QACTP,EAASO,GAFM,IAACA,GAOuEE,MAAOP,EAAaQ,YAAY,oBAAoBC,WAAS,O,iBCEzIC,EAVC,WACd,OACE,yBACEhB,IAAKiB,IACLC,MAAO,CAAEC,MAAO,QAASC,OAAQ,OAAQC,QAAS,SAClDnB,IAAI,aCuBKoB,EA7BO,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACtB,OACE,yBAAKxB,UAAU,QACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,cACb,yBAAKC,IAAKuB,EAAKC,IAAKtB,IAAI,MAE1B,yBAAKH,UAAU,aACb,4BAAKwB,EAAKE,MACV,4BACE,4BACE,+CADF,IACgCF,EAAKG,WAErC,4BACE,6CADF,IAC8BH,EAAKI,UAEnC,4BACE,6CADF,IAC8BJ,EAAKK,UAEnC,4BACE,2CADF,IAC4BL,EAAKM,aCN9BC,EAZO,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,MACjC,OAAOD,EACL,kBAAC,EAAD,MAEA,6BAAShC,UAAU,SAChBiC,EAAMC,KAAI,SAAAV,GACT,OAAQ,kBAAC,EAAD,CAAeW,IAAKX,EAAKY,QAASZ,KAAMA,SCmBzCa,MAvBf,WAAgB,IAAD,EACa/B,mBAAS,IADtB,mBACN2B,EADM,KACCK,EADD,OAEkBhC,oBAAS,GAF3B,mBAEN0B,EAFM,KAEIO,EAFJ,OAGYjC,mBAAS,IAHrB,mBAGNkC,EAHM,KAGAnC,EAHA,KAcb,OAVAoC,qBAAU,WAENF,GAAW,GACXG,IAAMC,IAAN,iGAAoGH,IAASI,MAAK,SAAAC,GAChHP,EAASO,EAAIC,MACbP,GAAW,QAIf,CAACC,IAED,yBAAKxC,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQK,SAAU,SAACO,GAAD,OAAKP,EAASO,MAChC,kBAAC,EAAD,CAAeoB,UAAWA,EAAWC,MAAOA,MCZ9Bc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.543e6c1c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3795f66d.png\";","module.exports = __webpack_public_path__ + \"static/media/spinner.235b9b3e.gif\";","import React from 'react'\r\nimport logo from '../img/logo.png'\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className='center'>\r\n      <img src={logo} alt='' />\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header","import React,{useState} from 'react';\r\n\r\nconst Search = ({setQuery}) => {\r\n  const [entrySearch,setEntry] = useState(\"\");\r\n  const onChange = (q)=>{\r\n    setEntry(q);\r\n    setQuery(q);\r\n  };\r\n  return (\r\n    <section className='search'>\r\n      <form>\r\n        <input type='text' className='form-control' onChange={e=>onChange(e.target.value)} value={entrySearch} placeholder='Search characters' autoFocus/>\r\n      </form>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Search","import React from 'react'\r\nimport spinner from '../img/spinner.gif';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <img\r\n      src={spinner}\r\n      style={{ width: '200px', margin: 'auto', display: 'block' }}\r\n      alt='Loading'\r\n    />\r\n  )\r\n}\r\n\r\nexport default Spinner","import React from 'react'\r\n\r\nconst CharacterItem = ({item}) => {\r\n  return (\r\n    <div className='card'>\r\n      <div className='card-inner'>\r\n        <div className='card-front'>\r\n          <img src={item.img} alt='' />\r\n        </div>\r\n        <div className='card-back'>\r\n          <h1>{item.name}</h1>\r\n          <ul>\r\n            <li>\r\n              <strong>Actor Name:</strong> {item.portrayed}\r\n            </li>\r\n            <li>\r\n              <strong>Nickname:</strong> {item.nickname}\r\n            </li>\r\n            <li>\r\n              <strong>Birthday:</strong> {item.birthday}\r\n            </li>\r\n            <li>\r\n              <strong>Status:</strong> {item.status}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CharacterItem","import React from 'react'\r\nimport Spinner from './Spinner';\r\nimport CharacterItem from './Item';\r\n\r\nconst CharacterGrid = ({isLoading, items}) => {\r\n  return isLoading ? (\r\n    <Spinner />\r\n  ) : (\r\n    <section className='cards'>\r\n      {items.map(item=>{\r\n        return (<CharacterItem key={item.char_id} item={item} />)\r\n      })}\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default CharacterGrid","import React,{useState,useEffect} from 'react';\nimport axios from 'axios';\nimport Header from './components/Header';\nimport Search from './components/Search';\nimport CharacterGrid from './components/Grid';\n\nfunction App() {\n  const [items ,setItems] = useState([]);\n  const [isLoading,setLoading] = useState(true);\n  const [query,setQuery] = useState(\"\");\n  useEffect(()=>{\n    const fetchItems = ()=>{\n      setLoading(true);\n      axios.get(`https://cors-anywhere.herokuapp.com/https://www.breakingbadapi.com/api/characters?name=${query}`).then(res=>{\n        setItems(res.data);\n        setLoading(false);\n      });\n    };\n    fetchItems();\n  },[query]);\n  return (\n    <div className='container'>\n      <Header />\n      <Search setQuery={(q)=>setQuery(q)} />\n      <CharacterGrid isLoading={isLoading} items={items} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}